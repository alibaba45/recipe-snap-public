Changelog:
2025-05-09
### Fixed
- Resolved critical client-side infinite loop in OCR usage fetching (`useOcrHandler.ts`) caused by incorrect `useEffect` dependencies, significantly reducing Firebase Function invocations and Firestore reads.
- Corrected TypeScript errors related to variable declaration order and scope in `page.tsx` and `useOcrHandler.ts`.
- Stabilized Firebase Functions service initialization within `useOcrHandler.ts` by switching to a globally initialized instance from `config.ts`.

### Changed
- Refactored OCR initiation logic from `page.tsx` into a dedicated custom hook `useOcrHandler.ts` for better separation of concerns.
- Deployed `getUserOcrUsage` v2 Cloud Function to fetch user's OCR scan count and limits.
- Updated `functions/index.js` to correctly export functions from newly created `usageCapFunctions.js`.

### Added
- Initial client-side logic in `useOcrHandler.ts` to call `getUserOcrUsage` and manage loading/error states for OCR usage data.
- Manual Firestore setup for `users/{uid}/usage/{YYYY-MM}` to store `ocrScanCount`.
- (Conceptual) Planned for local-first OCR counter display using IndexedDB to minimize initial Firebase calls.

2025-05-08
feat(admin): Implement admin user profile management

- Add callable Cloud Function `getUserProfileAdmin` to fetch user profiles from Firestore.
- Add callable Cloud Function `updateUserAdmin` to update user profiles (tier, tokens, notes) with input validation, sanitization, and audit logging.
- Create `firestoreUtils.js` with `getUserDocument` and `updateUserDocument` helpers.
- Create `actionLogUtils.js` with `createAuditLog` helper for logging admin actions to Firestore.
- Update Admin Page UI (`/admin`) to display fetched user profile details upon selection from the user list.
- Implement edit-in-place functionality on Admin Page for selected user profiles (Tier, Tokens, Notes) with Save/Cancel actions calling `updateUserAdmin`.
- Add back button navigation to Admin Page.
- Fix various Cloud Function deployment issues (linting, imports, parsing).
- Refactor Cloud Function region handling for client-side calls.
- Ensure Firestore `users` collection exists for testing profile management.
2025-05-07
feat: Implement Admin User Designation via Firebase Custom Claims
- Added Firebase Cloud Function (`processAdminClaimRequest`) triggered by Firestore writes to `adminClaimRequests` collection to set/remove `admin:true` custom claims on users.
- Implemented `adminActionLogs` Firestore collection for auditing administrative changes made by the Cloud Function.
- Upgraded Firebase project to Blaze plan to support Cloud Function deployment.
- Updated `AuthContext` to read custom claims from user ID tokens and expose an `isAdmin` boolean state.
- Modified `AppHeader` to display an "Admin" title variant and a conditional admin panel icon/link for users with the `admin:true` claim.
- Iteratively debugged and resolved Cloud Function deployment errors, including ESLint issues, SDK syntax errors for v2 Firestore triggers, and Eventarc permission propagation delays.

2025-05-04
feat: Implement Firestore cloud save for recipes when logged in.
feat: Add data cleaning to convert undefined optional fields to null before Firestore writes.
feat: Refactor recipe store to use separate 'isSaving' state for add/update operations.
feat: Implement post-save alert feedback (Option 3).
feat: Add 'Clear Form' button to Recipe Edit view.
feat: Refactor AI blur logic into reusable 'useRecipeAiAssist' custom hook.
fix: Resolve Firestore 'permission-denied' error by correcting security rules and data preparation.
fix: Correct multiple TypeScript errors related to props and state management in page and RecipeEdit components.
fix: Correct 'handleInputChange' calling convention in RecipeEdit.
chore: Configure local Git user identity.

2024-05-02
feat: Implement Firebase Authentication with Google Sign-In context provider.
feat: Add Firestore database service (firestoreService.ts) for recipe CRUD operations.
feat: Implement Repository pattern (recipeRepository.ts) to abstract data source logic.
feat: Integrate Zustand (recipeStore.ts) for centralized recipe state management.
refactor: Update main page (page.tsx) to use Zustand store for state and actions.
refactor: Update Settings view to use AuthContext.
fix: Add data cleaning in firestoreService.ts to remove undefined values before writes.
fix: Correct various TypeScript and syntax errors in multiple components.
fix: Update Firestore security rules to allow null values for optional fields.
feat: Add conditional "Save to Cloud" button in RecipeDetail for testing Firestore writes.
chore: Attempt Firebase Emulator setup and troubleshoot environment issues (Java, Ports, Nix).
chore: Revert Firebase config to use live backend due to emulator/login constraints.

2025/05/01
- **feat(auth):** Implement Firebase Google Authentication using signInWithPopup.
- **feat(auth):** Add global authentication state management via React Context (AuthContext).
- **feat(ui):** Integrate user login status, Sign In/Sign Out buttons into App Header.
- **feat(ui):** Add 'Organizer' tab and placeholder view to Bottom Navigation.
- **feat(ui):** Display loading indicator during background AI operations near AI Chat FAB.
- **fix(auth):** Resolve Firebase/GCP configuration mismatch preventing Google Sign-in.
- **fix(auth):** Ensure correct OAuth Client ID and Redirect URI are configured.
- **fix(ui):** Keep AI Chat FAB visible on Edit/Detail views.
- **fix(dev):** Change development server port to avoid EADDRINUSE conflict.
- **fix(nav):** Correct navigation logic for the new 'Organizer' tab.
- **refactor(auth):** Lift AI analysis loading state (isAiLoading) to parent component.
