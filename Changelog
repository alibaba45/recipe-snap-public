Changelog:
 2024-05-19
feat: Solidify Comprehensive User Profile & Auth Flow

- Defined canonical user profile types (`ComprehensiveUserProfile`, `UserPreferences`, etc.) in `src/types/index.ts`.
- Refactored `userStore.ts` to manage `ComprehensiveUserProfile`, `currentUser`, and handle localStorage hydration with SSR safety.
- Extensively refactored `AuthContext.tsx`:
    - Orchestrates fetching and creation of `ComprehensiveUserProfile` in Firestore.
    - Correctly populates `userStore` with profile data, respecting store hydration.
    - Implemented robust logic for new user profile document creation, including data cleaning (undefined to null) and server-set timestamps, resolving previous `setDoc` errors.
    - Resolved infinite loop during new user sign-up by implementing a `useRef` flag to manage profile creation attempts within snapshot listeners.
    - Establishes a default guest profile on logout.
    - Improved listener cleanup and `useEffect` stability.
- Updated Firestore security rules for `/users/{userId}` (`allow create`, `allow update`) to align with `ComprehensiveUserProfile` structure, data types, and timestamp handling (server timestamps for create/update). Validated rules in Playground.
- Drafted `USER_PROFILE_ARCHITECTURE.md` for user data flow and structure.
2025-05-17
feat: Implement robust Recipe DNA generation API

- Add new API endpoint `/api/ai/generate-recipe-dna` for comprehensive recipe analysis.
- Utilize Gemini 1.5 Pro with Tool Calling for structured `RecipeDNADetail` output.
- Define detailed JSON schema (`recipeDNADetailToolSchema`) for AI tool, including fields for annotated ingredients (with descriptors), annotated instructions, AI conceptual tags, user tag analysis, and recipe estimates.
- Implement comprehensive prompt engineering for accurate parsing and desired output style, particularly for foundational `aiConceptualTags` and ingredient `descriptors`.
- Successfully test API across diverse recipe types (soup, baking, stir-fry, no-cook, grouped ingredients), validating parsing accuracy for various structures and unit preferences.

fix: Resolve server-side and client-side initialization errors

- Implement `safeLocalStorage` wrapper in `userStore.ts` to prevent `localStorage` access errors during SSR.
- Standardize AI client initialization using a shared `getGenAIClient` and `GOOGLE_GENAI_API_KEY` environment variable.
- Correct `onRehydrateStorage` in `userStore.ts` to prevent "Cannot access 'useUserStore' before initialization" error by using the passed store instance.
- Align function signatures and type definitions for user profile data handling (`initializeUserProfileDataIfNeeded`, `getMvpUserProfileData`) to resolve TypeScript errors.
- Address API client (Postman) configuration issues (port, URL, headers) for successful backend testing.

refactor: Plan for user profile data model consolidation

- Strategize to revert UI components to a stable state to address client-side infinite loops.
- Outline plan to refactor user profile data:
  - Define `ComprehensiveUserProfile` in `aiTypes.ts` as the single source of truth.
  - Update `userStore.ts` to use `ComprehensiveUserProfile` for `state.profileData`.
  - Update `AuthContext.tsx` to fetch and populate the full `ComprehensiveUserProfile` into the store.
- This refactor will create a stable data foundation for subsequent AI feature integration in UI components like `RecipeEdit.tsx`.
2025-05-16
feat(ai): Implement structured title generation API (Phase 1)

- Added `StructuredTitleSuggestion` type for returning detailed title components.
- Centralized culinary keywords (methods, adjectives, dish categories, common ingredients) into `src/lib/culinaryData.ts`.
- Enhanced `detectCookingInfo` utility in `generate-recipe-field` API to identify dish categories and utilize centralized culinary data for improved recipe analysis.
- Overhauled `buildGenerateFieldPrompt` for `fieldName: "title"`:
    - Instructs LLM to output an array of `StructuredTitleSuggestion` objects.
    - Provides detailed guidance on deriving `methodStyle` (method or category), `mainDishComponent`, and optional `adjective`.
    - Incorporates hints from `detectCookingInfo` and establishes a clear hierarchy for contextual influence.
- Updated the `POST` handler in `generate-recipe-field` API to correctly parse and validate the new `StructuredTitleSuggestion[]` response for titles.
- Successfully tested structured title generation across multiple recipe types (soup, roasted dishes, salads, desserts), confirming accurate component extraction and high-quality title strings.
- Added placeholder logic for future `conceptualTags` generation.

2025-05-15
feat(api): Implement /api/ai/generate-recipe-field endpoint for contextual recipe field suggestions
- API route created using Next.js App Router structure.
- Supports suggestions for fields: title, description, ingredients, preparation, instructions, tags.
- Accepts current recipe draft, title, user profile data (pantry, preferences, unit system), and suggestion context (Basic, PantryOptimized, UserPreferenceEnhanced) as input.
- Dynamically builds prompts for Gemini 1.5 Pro, considering existing field content, servings, and user context.
- For 'ingredients' field, prompts AI to return structured data (list of ingredient objects with name, US/Metric units, size_modifier, prep_notes). Defaults to requesting dual US/Metric units.
- For other fields, prompts AI to return an array of text suggestions.
- Includes server-side mock profile override for testing via 'X-Use-Mock-Profile' header.
- Successfully tested with Postman, demonstrating high-quality structured output for ingredients.

feat(api): Implement /api/ai/seed-recipe-idea endpoint for title suggestion cache
- API route created using Next.js App Router structure.
- Accepts reference recipe title, tags, and user profile data.
- Calls Gemini LLM to generate complementary recipe titles.
- Tested via temporary button in RecipeEdit, successfully populates client-side IndexedDB cache.

feat(cache): Implement IndexedDB titleSuggestionsCache for recipe title auto-complete
- Defined schema and config in titleCacheConfig.ts.
- Implemented utility functions (open, add, query, increment selection) using 'idb' library.

fix(api): Corrected API route structure from Pages Router to App Router for /seed-recipe-idea, resolving 405 errors.
fix(client): Resolved TypeScript errors in RecipeEdit.tsx related to shared types and toast component usage.
fix(client): Addressed runtime errors in RecipeEdit.tsx by refactoring component state and handlers during AI feature testing.
chore(types): Created shared aiTypes.ts for AI API request/response interfaces (FieldName, SuggestionContext, UserProfileDataPayload, etc.).
chore(functions): Added missing Firebase Callable Functions (getUserAiAssistUsage, getUserOcrUsage) to resolve client-side CORS errors.
2025-05-13
### üêõ Bug Fixes & Resilience (Planned & Confirmed by User)

- **OCR API JSON Parsing:** Implemented a `cleanJsonString` utility in the `/api/ai/ocr` route to handle and remove trailing commas from AI-generated JSON, preventing parsing errors.
- **OCR Credit Refund Flow:**
    - Diagnosed that the `refundOcrCredit` Cloud Function was missing.
    - Designed and planned the `refundOcrCredit` v2 Firebase Function, including audit logging.
    - Confirmed (by user) that after implementation and deployment, the refund mechanism works correctly when triggered by a simulated client-side error.

### üõ†Ô∏è UI/UX Improvements

- **`OcrUploader.tsx` Enhancements:**
    - Now correctly handles "no credits" scenarios by disabling upload functionality and displaying clear messages.
    - Manages "not logged in" state by prompting users to sign in and appropriately disabling features.
- **`page.tsx` (Recipe List Update):** Integrated `fetchRecipes` into `handleOcrScanSuccess` to ensure the main recipe list updates immediately after an OCR draft is saved locally.
2025-05-11
### Feature: OCR Quota System & Processing Flow Foundation (Client-Side)

- **User Quota Management (`AuthContext`, `UserStore`):**
    - Implemented `UserStore` with Zustand `persist` middleware to cache OCR credits remaining, monthly limit, and last fetch timestamp in `localStorage`, enabling offline UI display of last known quota.
    - Refined `AuthContext` to:
        - Fetch authoritative quota via `getUserOcrUsage` Cloud Function on user login if local cache is empty.
        - Handle network errors during quota fetch gracefully by displaying persisted data and setting an error state, rather than resetting quota to zero.
        - Establish a Firestore `onSnapshot` listener for the user's monthly usage document (`users/{userId}/usage/{currentMonth}`).
        - The `onSnapshot` callback now robustly updates both `ocrCreditsRemaining` (based on `ocrScanCount`) and `ocrMonthlyLimit` (if the `limit` field changes in the snapshot) in the `UserStore`.
        - Correctly clears user-specific quota data from `UserStore` and `localStorage` on logout.
- **Firestore:**
    - Updated security rules to grant users read access to their own main user document (`/users/{userId}`) and their specific monthly usage documents (`/users/{userId}/usage/{usageDocId}`).
- **OCR Processing Hook (`useOcrProcessor` - Drafted):**
    - Designed the hook to manage the end-to-end OCR process.
    - Includes client-side pre-flight check of `ocrCreditsRemaining` from `UserStore`.
    - Calls `attemptAndIncrementUsage` Cloud Function for server-side credit debit.
    - Calls the `/api/ai/ocr` Next.js API route.
    - Prepares OCR data to match the application's `Recipe` interface (including `_isFromOcr: true`).
    - Saves the initial OCR draft to local IndexedDB via the `useRecipeStore.addRecipe` action (ensuring optimistic UI updates).
    - Includes logic to call `refundOcrCredit` Cloud Function if the OCR API call fails after a credit has been successfully debited.
    - Manages `isLoading` and `error` states for UI feedback.
- **UI Components (Drafted & Integrated for OCR Flow):**
    - `OcrUploader.tsx`: Component to handle file input, display OCR processing state (loading, error, credits remaining via `useOcrProcessor`), and trigger the processing.
    - `AddRecipeSheet.tsx`: Modified to trigger an OCR modal (controlled by `page.tsx`) when "Scan from Image" is selected.
    - `RecipeList.tsx`: Modified to include a "Scan Recipe" button that displays available credits and also triggers the OCR modal.
    - `page.tsx`:
        - Manages the visibility of the OCR modal containing `OcrUploader`.
        - Implements `handleOcrScanSuccess` to receive the locally saved OCR draft and navigate to `RecipeEdit`.
        - Simplified `handleSaveRecipe` to remove upfront credit deduction logic (now handled by `useOcrProcessor`); it now focuses on updating existing OCR drafts or adding new manual recipes.
- **Bug Fixes & Refinements:**
    - Resolved various TypeScript errors related to `HttpsCallableResult` type inference and component prop mismatches.
    - Added `_isFromOcr` flag to the core `Recipe` interface.
    - Corrected Firestore security rule paths and permissions.
- **Identified Next Steps:**
    - Full implementation and testing of `useOcrProcessor` and `OcrUploader`.
    - Finalizing `page.tsx` integration and `handleSaveRecipe` simplification.
    - Addressing the CORS issue for the `refundOcrCredit` Cloud Function.
2025-05-10
### Fixed
- Resolved IndexedDB error "keyPath did not yield a value" during new recipe creation by ensuring a local ID is generated before saving to the local database.
- Corrected HTML nesting issue in RecipeEdit component causing console errors by removing a conflicting Tooltip.
- Addressed Firestore data inconsistency with duplicate ocrScanCount fields.

### Changed
- Refined OCR processing flow to support different models for usage increment timing (upfront vs. on explicit save).
- (On debug branch) Reverted OCR handling logic in main page component to a pre-hook state for focused debugging of save issues.

### Added
- (Conceptual) Planned for `requestOcrUsageCredit` Cloud Function and client-side logic for users to report OCR API failures after usage increment for manual review.
- (Cloud Functions) Successfully deployed `getUserOcrUsage` and `attemptAndIncrementUsage` functions.
2025-05-09
### Fixed
- Resolved critical client-side infinite loop in OCR usage fetching (`useOcrHandler.ts`) caused by incorrect `useEffect` dependencies, significantly reducing Firebase Function invocations and Firestore reads.
- Corrected TypeScript errors related to variable declaration order and scope in `page.tsx` and `useOcrHandler.ts`.
- Stabilized Firebase Functions service initialization within `useOcrHandler.ts` by switching to a globally initialized instance from `config.ts`.

### Changed
- Refactored OCR initiation logic from `page.tsx` into a dedicated custom hook `useOcrHandler.ts` for better separation of concerns.
- Deployed `getUserOcrUsage` v2 Cloud Function to fetch user's OCR scan count and limits.
- Updated `functions/index.js` to correctly export functions from newly created `usageCapFunctions.js`.

### Added
- Initial client-side logic in `useOcrHandler.ts` to call `getUserOcrUsage` and manage loading/error states for OCR usage data.
- Manual Firestore setup for `users/{uid}/usage/{YYYY-MM}` to store `ocrScanCount`.
- (Conceptual) Planned for local-first OCR counter display using IndexedDB to minimize initial Firebase calls.

2025-05-08
feat(admin): Implement admin user profile management

- Add callable Cloud Function `getUserProfileAdmin` to fetch user profiles from Firestore.
- Add callable Cloud Function `updateUserAdmin` to update user profiles (tier, tokens, notes) with input validation, sanitization, and audit logging.
- Create `firestoreUtils.js` with `getUserDocument` and `updateUserDocument` helpers.
- Create `actionLogUtils.js` with `createAuditLog` helper for logging admin actions to Firestore.
- Update Admin Page UI (`/admin`) to display fetched user profile details upon selection from the user list.
- Implement edit-in-place functionality on Admin Page for selected user profiles (Tier, Tokens, Notes) with Save/Cancel actions calling `updateUserAdmin`.
- Add back button navigation to Admin Page.
- Fix various Cloud Function deployment issues (linting, imports, parsing).
- Refactor Cloud Function region handling for client-side calls.
- Ensure Firestore `users` collection exists for testing profile management.
2025-05-07
feat: Implement Admin User Designation via Firebase Custom Claims
- Added Firebase Cloud Function (`processAdminClaimRequest`) triggered by Firestore writes to `adminClaimRequests` collection to set/remove `admin:true` custom claims on users.
- Implemented `adminActionLogs` Firestore collection for auditing administrative changes made by the Cloud Function.
- Upgraded Firebase project to Blaze plan to support Cloud Function deployment.
- Updated `AuthContext` to read custom claims from user ID tokens and expose an `isAdmin` boolean state.
- Modified `AppHeader` to display an "Admin" title variant and a conditional admin panel icon/link for users with the `admin:true` claim.
- Iteratively debugged and resolved Cloud Function deployment errors, including ESLint issues, SDK syntax errors for v2 Firestore triggers, and Eventarc permission propagation delays.

2025-05-04
feat: Implement Firestore cloud save for recipes when logged in.
feat: Add data cleaning to convert undefined optional fields to null before Firestore writes.
feat: Refactor recipe store to use separate 'isSaving' state for add/update operations.
feat: Implement post-save alert feedback (Option 3).
feat: Add 'Clear Form' button to Recipe Edit view.
feat: Refactor AI blur logic into reusable 'useRecipeAiAssist' custom hook.
fix: Resolve Firestore 'permission-denied' error by correcting security rules and data preparation.
fix: Correct multiple TypeScript errors related to props and state management in page and RecipeEdit components.
fix: Correct 'handleInputChange' calling convention in RecipeEdit.
chore: Configure local Git user identity.

2024-05-02
feat: Implement Firebase Authentication with Google Sign-In context provider.
feat: Add Firestore database service (firestoreService.ts) for recipe CRUD operations.
feat: Implement Repository pattern (recipeRepository.ts) to abstract data source logic.
feat: Integrate Zustand (recipeStore.ts) for centralized recipe state management.
refactor: Update main page (page.tsx) to use Zustand store for state and actions.
refactor: Update Settings view to use AuthContext.
fix: Add data cleaning in firestoreService.ts to remove undefined values before writes.
fix: Correct various TypeScript and syntax errors in multiple components.
fix: Update Firestore security rules to allow null values for optional fields.
feat: Add conditional "Save to Cloud" button in RecipeDetail for testing Firestore writes.
chore: Attempt Firebase Emulator setup and troubleshoot environment issues (Java, Ports, Nix).
chore: Revert Firebase config to use live backend due to emulator/login constraints.

2025/05/01
- **feat(auth):**¬†Implement Firebase Google Authentication using¬†signInWithPopup.
- **feat(auth):**¬†Add global authentication state management via React Context (AuthContext).
- **feat(ui):**¬†Integrate user login status, Sign In/Sign Out buttons into App Header.
- **feat(ui):**¬†Add 'Organizer' tab and placeholder view to Bottom Navigation.
- **feat(ui):**¬†Display loading indicator during background AI operations near AI Chat FAB.
- **fix(auth):**¬†Resolve Firebase/GCP configuration mismatch preventing Google Sign-in.
- **fix(auth):**¬†Ensure correct OAuth Client ID and Redirect URI are configured.
- **fix(ui):**¬†Keep AI Chat FAB visible on Edit/Detail views.
- **fix(dev):**¬†Change development server port to avoid EADDRINUSE conflict.
- **fix(nav):**¬†Correct navigation logic for the new 'Organizer' tab.
- **refactor(auth):**¬†Lift AI analysis loading state (isAiLoading) to parent component.
